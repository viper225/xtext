/*
 * generated by Xtext
 */
package org.eclipse.xtext.formatting2.regionaccess.internal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RegionAccessTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSimpleParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDelegationParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cUnassignedParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPrefixedUnassignedParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cDigitFiveKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		
		//Root:
		//	"test" (Simple | Delegation | Unassigned | PrefixedUnassigned | "5" Expression);
		@Override public ParserRule getRule() { return rule; }

		//"test" (Simple | Delegation | Unassigned | PrefixedUnassigned | "5" Expression)
		public Group getGroup() { return cGroup; }

		//"test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//Simple | Delegation | Unassigned | PrefixedUnassigned | "5" Expression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Simple
		public RuleCall getSimpleParserRuleCall_1_0() { return cSimpleParserRuleCall_1_0; }

		//Delegation
		public RuleCall getDelegationParserRuleCall_1_1() { return cDelegationParserRuleCall_1_1; }

		//Unassigned
		public RuleCall getUnassignedParserRuleCall_1_2() { return cUnassignedParserRuleCall_1_2; }

		//PrefixedUnassigned
		public RuleCall getPrefixedUnassignedParserRuleCall_1_3() { return cPrefixedUnassignedParserRuleCall_1_3; }

		//"5" Expression
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"5"
		public Keyword getDigitFiveKeyword_1_4_0() { return cDigitFiveKeyword_1_4_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_4_1() { return cExpressionParserRuleCall_1_4_1; }
	}

	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Simple:
		//	"1" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"1" name=ID
		public Group getGroup() { return cGroup; }

		//"1"
		public Keyword getDigitOneKeyword_0() { return cDigitOneKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateDelegateParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//Delegation:
		//	"2" delegate=Delegate;
		@Override public ParserRule getRule() { return rule; }

		//"2" delegate=Delegate
		public Group getGroup() { return cGroup; }

		//"2"
		public Keyword getDigitTwoKeyword_0() { return cDigitTwoKeyword_0; }

		//delegate=Delegate
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }

		//Delegate
		public RuleCall getDelegateDelegateParserRuleCall_1_0() { return cDelegateDelegateParserRuleCall_1_0; }
	}

	public class UnassignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unassigned");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDelegateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Unassigned:
		//	"3" Delegate;
		@Override public ParserRule getRule() { return rule; }

		//"3" Delegate
		public Group getGroup() { return cGroup; }

		//"3"
		public Keyword getDigitThreeKeyword_0() { return cDigitThreeKeyword_0; }

		//Delegate
		public RuleCall getDelegateParserRuleCall_1() { return cDelegateParserRuleCall_1; }
	}

	public class PrefixedUnassignedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixedUnassigned");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegatePrefixedDelegateParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//PrefixedUnassigned:
		//	"4" delegate=PrefixedDelegate;
		@Override public ParserRule getRule() { return rule; }

		//"4" delegate=PrefixedDelegate
		public Group getGroup() { return cGroup; }

		//"4"
		public Keyword getDigitFourKeyword_0() { return cDigitFourKeyword_0; }

		//delegate=PrefixedDelegate
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }

		//PrefixedDelegate
		public RuleCall getDelegatePrefixedDelegateParserRuleCall_1_0() { return cDelegatePrefixedDelegateParserRuleCall_1_0; }
	}

	public class PrefixedDelegateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixedDelegate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDelegateParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PrefixedDelegate:
		//	"prefix" Delegate;
		@Override public ParserRule getRule() { return rule; }

		//"prefix" Delegate
		public Group getGroup() { return cGroup; }

		//"prefix"
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }

		//Delegate
		public RuleCall getDelegateParserRuleCall_1() { return cDelegateParserRuleCall_1; }
	}

	public class DelegateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegate");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Delegate:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Primary ({Add.left=current} "+" right=Primary)*;
		@Override public ParserRule getRule() { return rule; }

		//Primary ({Add.left=current} "+" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Add.left=current} "+" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add.left=current}
		public Action getAddLeftAction_1_0() { return cAddLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNamedAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cParenthesizedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary returns Expression:
		//	{Named} name=ID | Parenthesized;
		@Override public ParserRule getRule() { return rule; }

		//{Named} name=ID | Parenthesized
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Named} name=ID
		public Group getGroup_0() { return cGroup_0; }

		//{Named}
		public Action getNamedAction_0_0() { return cNamedAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//Parenthesized
		public RuleCall getParenthesizedParserRuleCall_1() { return cParenthesizedParserRuleCall_1; }
	}

	public class ParenthesizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parenthesized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesized returns Expression:
		//	"(" Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private final RootElements pRoot;
	private final SimpleElements pSimple;
	private final DelegationElements pDelegation;
	private final UnassignedElements pUnassigned;
	private final PrefixedUnassignedElements pPrefixedUnassigned;
	private final PrefixedDelegateElements pPrefixedDelegate;
	private final DelegateElements pDelegate;
	private final ExpressionElements pExpression;
	private final PrimaryElements pPrimary;
	private final ParenthesizedElements pParenthesized;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RegionAccessTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pSimple = new SimpleElements();
		this.pDelegation = new DelegationElements();
		this.pUnassigned = new UnassignedElements();
		this.pPrefixedUnassigned = new PrefixedUnassignedElements();
		this.pPrefixedDelegate = new PrefixedDelegateElements();
		this.pDelegate = new DelegateElements();
		this.pExpression = new ExpressionElements();
		this.pPrimary = new PrimaryElements();
		this.pParenthesized = new ParenthesizedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.formatting2.regionaccess.internal.RegionAccessTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	"test" (Simple | Delegation | Unassigned | PrefixedUnassigned | "5" Expression);
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Simple:
	//	"1" name=ID;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}

	//Delegation:
	//	"2" delegate=Delegate;
	public DelegationElements getDelegationAccess() {
		return pDelegation;
	}
	
	public ParserRule getDelegationRule() {
		return getDelegationAccess().getRule();
	}

	//Unassigned:
	//	"3" Delegate;
	public UnassignedElements getUnassignedAccess() {
		return pUnassigned;
	}
	
	public ParserRule getUnassignedRule() {
		return getUnassignedAccess().getRule();
	}

	//PrefixedUnassigned:
	//	"4" delegate=PrefixedDelegate;
	public PrefixedUnassignedElements getPrefixedUnassignedAccess() {
		return pPrefixedUnassigned;
	}
	
	public ParserRule getPrefixedUnassignedRule() {
		return getPrefixedUnassignedAccess().getRule();
	}

	//PrefixedDelegate:
	//	"prefix" Delegate;
	public PrefixedDelegateElements getPrefixedDelegateAccess() {
		return pPrefixedDelegate;
	}
	
	public ParserRule getPrefixedDelegateRule() {
		return getPrefixedDelegateAccess().getRule();
	}

	//Delegate:
	//	name=ID;
	public DelegateElements getDelegateAccess() {
		return pDelegate;
	}
	
	public ParserRule getDelegateRule() {
		return getDelegateAccess().getRule();
	}

	//Expression:
	//	Primary ({Add.left=current} "+" right=Primary)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Primary returns Expression:
	//	{Named} name=ID | Parenthesized;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Parenthesized returns Expression:
	//	"(" Expression ")";
	public ParenthesizedElements getParenthesizedAccess() {
		return pParenthesized;
	}
	
	public ParserRule getParenthesizedRule() {
		return getParenthesizedAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
