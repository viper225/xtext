/*
 * generated by Xtext
 */
grammar InternalRegionAccessTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.formatting2.regionaccess.internal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.formatting2.regionaccess.internal.services.RegionAccessTestLanguageGrammarAccess;

}

@parser::members {

 	private RegionAccessTestLanguageGrammarAccess grammarAccess;
 	
    public InternalRegionAccessTestLanguageParser(TokenStream input, RegionAccessTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected RegionAccessTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='test' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootAccess().getTestKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getRootAccess().getSimpleParserRuleCall_1_0()); 
    }
    this_Simple_1=ruleSimple
    { 
        $current = $this_Simple_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRootAccess().getDelegationParserRuleCall_1_1()); 
    }
    this_Delegation_2=ruleDelegation
    { 
        $current = $this_Delegation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRootAccess().getUnassignedParserRuleCall_1_2()); 
    }
    this_Unassigned_3=ruleUnassigned
    { 
        $current = $this_Unassigned_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRootAccess().getPrefixedUnassignedParserRuleCall_1_3()); 
    }
    this_PrefixedUnassigned_4=rulePrefixedUnassigned
    { 
        $current = $this_PrefixedUnassigned_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_5='5' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRootAccess().getDigitFiveKeyword_1_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getRootAccess().getExpressionParserRuleCall_1_4_1()); 
    }
    this_Expression_6=ruleExpression
    { 
        $current = $this_Expression_6.current; 
        afterParserOrEnumRuleCall();
    }
)))
;





// Entry rule entryRuleSimple
entryRuleSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleRule()); }
	 iv_ruleSimple=ruleSimple 
	 { $current=$iv_ruleSimple.current; } 
	 EOF 
;

// Rule Simple
ruleSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleAccess().getDigitOneKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSimpleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDelegation
entryRuleDelegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelegationRule()); }
	 iv_ruleDelegation=ruleDelegation 
	 { $current=$iv_ruleDelegation.current; } 
	 EOF 
;

// Rule Delegation
ruleDelegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDelegationAccess().getDigitTwoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelegationAccess().getDelegateDelegateParserRuleCall_1_0()); 
	    }
		lv_delegate_1_0=ruleDelegate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegationRule());
	        }
       		set(
       			$current, 
       			"delegate",
        		lv_delegate_1_0, 
        		"Delegate");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnassigned
entryRuleUnassigned returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnassignedRule()); }
	 iv_ruleUnassigned=ruleUnassigned 
	 { $current=$iv_ruleUnassigned.current; } 
	 EOF 
;

// Rule Unassigned
ruleUnassigned returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='3' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnassignedAccess().getDigitThreeKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnassignedAccess().getDelegateParserRuleCall_1()); 
    }
    this_Delegate_1=ruleDelegate
    { 
        $current = $this_Delegate_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrefixedUnassigned
entryRulePrefixedUnassigned returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixedUnassignedRule()); }
	 iv_rulePrefixedUnassigned=rulePrefixedUnassigned 
	 { $current=$iv_rulePrefixedUnassigned.current; } 
	 EOF 
;

// Rule PrefixedUnassigned
rulePrefixedUnassigned returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='4' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrefixedUnassignedAccess().getDigitFourKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixedUnassignedAccess().getDelegatePrefixedDelegateParserRuleCall_1_0()); 
	    }
		lv_delegate_1_0=rulePrefixedDelegate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixedUnassignedRule());
	        }
       		set(
       			$current, 
       			"delegate",
        		lv_delegate_1_0, 
        		"PrefixedDelegate");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrefixedDelegate
entryRulePrefixedDelegate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixedDelegateRule()); }
	 iv_rulePrefixedDelegate=rulePrefixedDelegate 
	 { $current=$iv_rulePrefixedDelegate.current; } 
	 EOF 
;

// Rule PrefixedDelegate
rulePrefixedDelegate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='prefix' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrefixedDelegateAccess().getPrefixKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrefixedDelegateAccess().getDelegateParserRuleCall_1()); 
    }
    this_Delegate_1=ruleDelegate
    { 
        $current = $this_Delegate_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDelegate
entryRuleDelegate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelegateRule()); }
	 iv_ruleDelegate=ruleDelegate 
	 { $current=$iv_ruleDelegate.current; } 
	 EOF 
;

// Rule Delegate
ruleDelegate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDelegateAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelegateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getAddLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getNamedAction_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrimaryAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getParenthesizedParserRuleCall_1()); 
    }
    this_Parenthesized_2=ruleParenthesized
    { 
        $current = $this_Parenthesized_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesized
entryRuleParenthesized returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedRule()); }
	 iv_ruleParenthesized=ruleParenthesized 
	 { $current=$iv_ruleParenthesized.current; } 
	 EOF 
;

// Rule Parenthesized
ruleParenthesized returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesizedAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedAccess().getRightParenthesisKeyword_2());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


